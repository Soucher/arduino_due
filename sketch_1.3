#include "U8glib.h"
#include <Wire.h>
#include <Adafruit_BMP085.h>
#include <DS1307.h>
#include <dht.h>
#include <OneWire.h>
#include <SPI.h>
#include <Ethernet.h>
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
byte ip[] = { 192, 168, 192, 168 };
EthernetServer server(80); 
dht DHT;

#define DHT11_PIN 9
#define DHT21_PIN 14
#define DHT22_PIN 11
U8GLIB_ST7920_128X64 u8g(3, 8, 7, U8G_PIN_NONE);   // SPI E = 3, RW = 8, RS = 7
Adafruit_BMP085 bmp;     // Digital Pressure Sensor 
long Temperature = 0, Pressure = 0, Altitude = 0;

void setup(void) {
  u8g.setRot180(); //Перевернул экран
Serial.begin(9600);
  if (!bmp.begin()) {
	Serial.println("Could not find a valid BMP085 sensor, check wiring!");
	while (1) {}
  }
  //Wire.begin(); 
  //delay(1000);
Ethernet.begin(mac, ip);
server.begin();


  
}  

void loop(void) {


  // picture loop
  u8g.firstPage();  
  do {
  // READ DATA
  int chk = DHT.read11(DHT11_PIN);
  switch (chk)
  // DISPLAY DATA
    u8g.setColorIndex(1);    // белые чернила, черный фон
    u8g.setPrintPos(1, 10);  // позиция
    u8g.print("T(11):");    // вывод текста
    u8g.println(DHT.temperature,1);    // вывод текста   
    delay(1000);
 ///   
    ////
  
  chk = DHT.read22(DHT22_PIN);
  switch (chk)
  // DISPLAY DATA
    u8g.setColorIndex(1);    // белые чернила, черный фон
    u8g.setPrintPos(65, 10);  // позиция
    u8g.print("T(22):");    // вывод текста
    u8g.println(DHT.temperature,1);    // вывод текста   
    delay(1000);
    
    ////
    //u8g.drawBox(0,22,128,9); // Закрашиваем прямоугольник белым
    ////
  chk = DHT.read21(DHT21_PIN);
  switch (chk)
  // DISPLAY DATA
    u8g.setColorIndex(1);    // белые чернила, черный фон
    u8g.setPrintPos(1, 20);  // позиция
    u8g.print("T(21):");    // вывод текста
    u8g.println(DHT.temperature,1);    // вывод текста   
    delay(1000);
    
    ////
    u8g.setFont(u8g_font_6x10); // шрифт
    u8g.setColorIndex(1);    // белые чернила, черный фон
    u8g.setPrintPos(65, 20);  // позиция
    u8g.print("T(C):");    // вывод текста
    u8g.print(bmp.readTemperature());    // вывод текста



//вывод с барометра
  
    u8g.setFont(u8g_font_6x10); // шрифт
    u8g.setColorIndex(1);    // белые чернила, черный фон
    u8g.setPrintPos(1, 30);  // позиция
    u8g.print("Pressure(Pa):");    // вывод текста
    u8g.print(bmp.readPressure());    // вывод текста
    
    u8g.setFont(u8g_font_6x10); // шрифт
    u8g.setColorIndex(1);    // белые чернила, черный фон
    u8g.setPrintPos(1, 40);  // позиция
    u8g.print("Alt(m):");    // вывод текста
    u8g.print(bmp.readAltitude());    // вывод текста
// end

//вывод DHT11

//конец вывода DTH11


  } while( u8g.nextPage() );

  //Ethernet
   EthernetClient client = server.available();
  if (client) {
  //  Serial.println("new client");
    // an http request ends with a blank line
   boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
       // Serial.write(c);
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && currentLineIsBlank) {
          // send a standard http response header
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
       //   client.println("Connection: close");
          client.println();
         // client.println("<!DOCTYPE HTML>");
         // client.println("<html>");
                    // add a meta refresh tag, so the browser pulls again every 5 seconds:
         // client.println("<meta http-equiv=\"refresh\" content=\"5\">");
          // output the value of each analog input pin
        //  for (int analogChannel = 0; analogChannel < 1; analogChannel++) {
         //   int sensorReading = analogRead(analogChannel);
            client.print("<b>-=Home=-</b>");
            client.println("<br />");
           client.print("DHT11 ");
            client.println("<br />"); 
            int chk = DHT.read11(DHT11_PIN);
            switch (chk)
            client.println("<br />"); 
            client.print("Temperature,(C): ");
            client.print(DHT.temperature,1);
            client.println(",\t"); 
            client.print("Humidity,%: ");
            client.print(DHT.humidity,1);
            client.println("<br />"); 
            client.println("<br />");
            client.print("BMP085");
            client.println("<br />"); 
            client.print("Temperature,(C): ");
            client.print(bmp.readTemperature());
            client.println("<br />"); 
            client.print("Altitude(m): ");
            client.print(bmp.readAltitude());
            client.println("<br />"); 
            client.print("Pressure(Pa): ");
            client.print(bmp.readPressure());
            client.println("<br />"); 
            client.print("Real altitude(m): ");
            client.print(bmp.readAltitude(101500));
            
            client.println("<br />"); 
            client.println("<br />");
            client.println("<b>-=Street=-</b>");
            client.println("<br />");
            client.println("<br />");
            client.print("DHT21");
            client.println("<br />");
            chk = DHT.read21(DHT21_PIN);
            switch (chk)
            client.println("<br />"); 
            client.print("Temperature,(C): ");
            client.print(DHT.temperature,1);
            client.println(",\t"); 
            client.print("Humidity,%: ");
            client.print(DHT.humidity,1);
            client.println("<br />");
            client.print("DHT22");
            client.println("<br />");
            chk = DHT.read22(DHT22_PIN);
            switch (chk)
            client.println("<br />"); 
            client.print("Temperature,(C): ");
            client.print(DHT.temperature,1);
            client.println(",\t"); 
            client.print("Humidity,%: ");
            client.print(DHT.humidity,1);
         // }
      //    client.println("</html>");
          break;
        }
        if (c == '\n') {
          // you're starting a new line
          currentLineIsBlank = true;
        } 
        else if (c != '\r') {
          // you've gotten a character on the current line
          currentLineIsBlank = false;
        }
      }
    }
    // give the web browser time to receive the data
    delay(1);
    // close the connection:
    client.stop();
    
  }
  //end Ethrnet
  // rebuild the picture after some delay
  delay(1000);
}
