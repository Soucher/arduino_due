#include "U8glib.h"
#include <Wire.h>
#include <BMP085.h>
#include <DS1307.h>
#include <dht.h>
#include <OneWire.h>
#include <SPI.h>
#include <Ethernet.h>

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
byte ip[] = { 192, 168, 192, 168 };
EthernetServer server(80); 
dht DHT;

#define DHT11_PIN 9
#define DHT21_PIN 10
#define DHT22_PIN 11
OneWire ds(2); // датчик ds18b20 pin на 2 входе Ардуино
U8GLIB_ST7920_128X64 u8g(3, 8, 7, U8G_PIN_NONE);   // SPI E = 3, RW = 8, RS = 7
BMP085 dps = BMP085();      // Digital Pressure Sensor 
long Temperature = 0, Pressure = 0, Altitude = 0;

void setup(void) {
  u8g.setRot180(); //Перевернул экран
Serial.begin(9600);
Serial.println("DHT TEST PROGRAM ");
  Serial.print("LIBRARY VERSION: ");
  Serial.println(DHT_LIB_VERSION);
  Serial.println();
  Serial.println("Type,\tstatus,\tHumidity (%),\tTemperature (C)");
  //Wire.begin(); 
  //delay(1000);
Ethernet.begin(mac, ip);
server.begin();

  dps.init(MODE_ULTRA_HIGHRES, 25000, true);  // 250 meters, true = using meter units
}  

void loop(void) {
//  DS1820
  
 byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
 
  if ( !ds.search(addr)) {
 //  Serial.println("No more addresses.");
 //  Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
  
//  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
   // Serial.write(' ');
  //  Serial.print(addr[i], HEX);
  }

  if (OneWire::crc8(addr, 7) != addr[7]) {
    //  Serial.println("CRC is not valid!");
      return;
  }
 // Serial.println();
 
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
     // Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
    //  Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
    //  Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
     // Serial.println("Device is not a DS18x20 family device.");
      return;
  } 

  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
  
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
  
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad

 /* Serial.print("  Data = ");
 Serial.print(present, HEX);
 Serial.print(" ");*/
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
   /* Serial.print(data[i], HEX);
   Serial.print(" ");*/
  }
/* Serial.print(" CRC=");
 Serial.print(OneWire::crc8(data, 8), HEX);
 Serial.println();*/

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
 /*Serial.print("  Temperature = ");
 Serial.print(celsius);
 Serial.print(" Celsius, ");
 Serial.print(fahrenheit);
Serial.println(" Fahrenheit"); */
  
  
//  end DS1820
//dht





  // READ DATA
  Serial.print("DHT22, \t");
  int chk = DHT.read22(DHT22_PIN);
  switch (chk)
  {
    case DHTLIB_OK:  
		Serial.print("OK,\t"); 
		break;
    case DHTLIB_ERROR_CHECKSUM: 
		Serial.print("Checksum error,\t"); 
		break;
    case DHTLIB_ERROR_TIMEOUT: 
		Serial.print("Time out error,\t"); 
		break;
    default: 
		Serial.print("Unknown error,\t"); 
		break;
  }
  // DISPLAY DATA
  Serial.print(DHT.humidity, 1);
  Serial.print(",\t");
  Serial.println(DHT.temperature, 1);

  delay(1000);

  



// end dht



  dps.getPressure(&Pressure);
  dps.getAltitude(&Altitude);
  dps.getTemperature(&Temperature);
  // picture loop
  u8g.firstPage();  
  do {
  // READ DATA
  chk = DHT.read11(DHT11_PIN);
  switch (chk)
  // DISPLAY DATA
    u8g.setColorIndex(1);    // белые чернила, черный фон
    u8g.setPrintPos(1, 10);  // позиция
    u8g.print("T(11):");    // вывод текста
    u8g.println(DHT.temperature,1);    // вывод текста   
    delay(1000);
 ///   
    ////
  
  chk = DHT.read21(DHT21_PIN);
  switch (chk)
  // DISPLAY DATA
    u8g.setColorIndex(1);    // белые чернила, черный фон
    u8g.setPrintPos(65, 10);  // позиция
    u8g.print("T(21):");    // вывод текста
    u8g.println(DHT.temperature,1);    // вывод текста   
    delay(1000);
    
    ////
    //u8g.drawBox(0,22,128,9); // Закрашиваем прямоугольник белым
    ////
   chk = DHT.read22(DHT22_PIN);
  switch (chk)
  // DISPLAY DATA
    u8g.setColorIndex(1);    // белые чернила, черный фон
    u8g.setPrintPos(1, 20);  // позиция
    u8g.print("T(22):");    // вывод текста
    u8g.println(DHT.temperature,1);    // вывод текста   
    delay(1000);
    
    ////




//вывод с барометра
  
    u8g.setFont(u8g_font_6x10); // шрифт
    u8g.setColorIndex(1);    // белые чернила, черный фон
    u8g.setPrintPos(1, 30);  // позиция
    u8g.print("Pressure(mm Hg):");    // вывод текста
    u8g.print(Pressure/133.3);    // вывод текста
    
    u8g.setFont(u8g_font_6x10); // шрифт
    u8g.setColorIndex(1);    // белые чернила, черный фон
    u8g.setPrintPos(1, 40);  // позиция
    u8g.print("Alt(m):");    // вывод текста
    u8g.print(Altitude/100);    // вывод текста
// end

//вывод DHT11

//конец вывода DTH11

    u8g.setFont(u8g_font_6x10); // шрифт
    u8g.setColorIndex(1);    // белые чернила, черный фон
    u8g.setPrintPos(1, 60);  // позиция
    u8g.print("Temp. OUT: ");    // вывод текста
    u8g.setPrintPos(85, 60);  // позиция
    u8g.print(celsius);    // вывод число секунд после старта
    
  } while( u8g.nextPage() );
  
  //Ethernet
   EthernetClient client = server.available();
  if (client) {
    Serial.println("new client");
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && currentLineIsBlank) {
          // send a standard http response header
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");
          client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<html>");
                    // add a meta refresh tag, so the browser pulls again every 5 seconds:
          client.println("<meta http-equiv=\"refresh\" content=\"5\">");
          // output the value of each analog input pin
          for (int analogChannel = 0; analogChannel < 1; analogChannel++) {
            int sensorReading = analogRead(analogChannel);
            client.print("<b>-=Home=-</b>");
            client.println("<br />"); 
            client.print("Temperature,%: ");
            client.print(Temperature*0.1);
            client.println("<br />"); 
            client.print("Humidity,%: ");
            client.print(DHT.humidity,1);
            client.println("<br />"); 
            client.println("<br />");
            client.println("<b>-=Street=-</b>");
            client.println("<br />");
            client.print("Temperature,C: ");
            client.print(celsius);
            client.println("<br />"); 
            client.print("Altitude(m): ");
            client.print(Altitude/100);
            client.println("<br />"); 
            client.print("Pressure(mm Hg): ");
            client.print(Pressure/133.3);
            client.println("<br />");      
          }
          client.println("</html>");
          break;
        }
        if (c == '\n') {
          // you're starting a new line
          currentLineIsBlank = true;
        } 
        else if (c != '\r') {
          // you've gotten a character on the current line
          currentLineIsBlank = false;
        }
      }
    }
    // give the web browser time to receive the data
    delay(2000);
    // close the connection:
    client.stop();
    
  }
  //end Ethrnet
  // rebuild the picture after some delay
  delay(1000);
}

